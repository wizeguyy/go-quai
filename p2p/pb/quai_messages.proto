syntax = "proto3";


package quaiprotocol;
option go_package = "github.com/dominant-strategies/go-quai/p2p/pb";

<<<<<<< HEAD
// GossipSub messages for broadcasting blocks and transactions
message GossipBlock { Block block = 1; }

message GossipTransaction { Transaction transaction = 1; }

// Stream-based request-response messages
message QuaiProtocolMessage {
  enum ActionType {
    REQUEST_BLOCK = 0;
    REQUEST_TRANSACTION = 1;
  }

  ActionType action = 1;
  bytes data = 2; // Encoded payload specific to the action
=======
// QuaiRequestMessage is the main 'envelope' for QuaiProtocol request messages
message QuaiRequestMessage {
    enum ActionType {
        UNKNOWN = 0;
        REQUEST_BLOCK = 1;
        REQUEST_TRANSACTION = 2;
        REQUEST_HEADER = 3;
    }

    ActionType action = 1;
    Request request = 2;
}

// QuaiResponseMessage is the main 'envelope' for QuaiProtocol response messages
message QuaiResponseMessage {
    enum ActionType {
        UNKNOWN = 0;
        RESPONSE_BLOCK = 1;
        RESPONSE_TRANSACTION = 2;
        RESPONSE_HEADER = 3;
        
    }

    ActionType action = 1;
    Response response = 2;
}

message Request {
    SliceID sliceId = 1;
    Hash hash = 2;
}

message Response {
    oneof response {
        Block block = 1;
        Transaction transaction = 2;
        Header header = 3;
    }
}

// Slice structure
message Context {
    string location = 1;
    uint32 level = 2;
}

message SliceID {
    Context context = 1;
    uint32 region = 2;
    uint32 zone = 3;
>>>>>>> f96751ebd (refactor protobuf api)
}

// Hash structure
message Hash {
    bytes hash = 1; // Hash is an array of 32 bytes
}

// Block structure
message Block {
    Header header = 1;
    repeated Transaction txs = 2;
    repeated Header uncles = 3;
    repeated Transaction etxs = 4;
// TODO: add submanifest
// TODO: add receipts
// TODO: add hasher
    uint32 nodeCtx = 7;
    // Additional fields...
}

<<<<<<< HEAD
// Define a transaction structure
message Transaction {
    Hash hash = 1;         // Unique identifier of the transaction
    string from = 2;         // Sender address
    string to = 3;           // Recipient address (empty for contract creation)
    uint64 nonce = 4;        // Nonce of the sender
    string value = 5;        // Value transferred in Wei
    string gasPrice = 6;     // Gas price in Wei
    uint64 gas = 7;          // Gas limit
    bytes input = 8;         // Input data (for contract calls)
    // TODO: evaluate adding additional fields for signature components (v, r, s) and chainID for EIP-155 compliance
}

// Request and response messages for block and transaction queries
message BlockRequest {
    SliceID sliceId = 1;
    Hash hash = 2;
}

message BlockResponse {
  bool found = 1;
  Block block = 2;
}

message TransactionRequest {
=======
// Header structure
message Header {
>>>>>>> f96751ebd (refactor protobuf api)
    Hash hash = 1;
    Hash parentHash = 2;
    uint64 gasLimit = 3;
    uint64 gasUsed = 4;
    // Additional fields...
}

<<<<<<< HEAD
message TransactionResponse {
  bool found = 1;
  Transaction transaction = 2;
}
=======
// Transaction structure
message Transaction {
    Hash hash = 1;
    string from = 2;
    string to = 3;
    uint64 nonce = 4;
    string value = 5;
    string gasPrice = 6;
    uint64 gas = 7;
    bytes input = 8;
    // Additional fields...
}
>>>>>>> f96751ebd (refactor protobuf api)
